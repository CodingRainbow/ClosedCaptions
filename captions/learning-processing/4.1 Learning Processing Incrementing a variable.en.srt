1
00:00:01,843 --> 00:00:04,054
So, thank you for coming back.
If you--

2
00:00:04,054 --> 00:00:07,803
If you really made it through that
entire, uhm, last video.

3
00:00:07,878 --> 00:00:10,809
Here we are again and we're
going to take a big leap now.

4
00:00:10,809 --> 00:00:12,274
We're gonna do something, uhm,

5
00:00:12,274 --> 00:00:16,629
even more exciting than we thought
was even ever possible in the previous

6
00:00:16,629 --> 00:00:17,378
video. OK.

7
00:00:17,378 --> 00:00:20,720
So, eh-- Here I am. I gotta
get myself situated here.

8
00:00:20,720 --> 00:00:24,938
What do we got? We got a Processing
sketch, with variable declared at the top.

9
00:00:25,104 --> 00:00:28,577
It's given initial value 50 and now
we're drawing that circle at 50,

10
00:00:28,577 --> 00:00:32,318
at 50, at 50, at 50,
at 50, at 50, at 50. Right?

11
00:00:32,318 --> 00:00:35,109
For ever and ever we got-- that's
why the circle is always there.

12
00:00:35,109 --> 00:00:37,169
We now want to move that circle.

13
00:00:37,169 --> 00:00:41,129
We needed a new assignment operation. We
have an assignment operation that's in

14
00:00:41,152 --> 00:00:43,301
'setup' that's giving it 
its initial value.

15
00:00:43,301 --> 00:00:47,520
Now we need an assignment
operation in 'draw'.

16
00:00:47,749 --> 00:00:51,302
Move the circle 1 pixel, right?
If the circle was at pixel

17
00:00:51,322 --> 00:00:55,261
50, move it to 51. If it's at
51 move it to 52. Right?

18
00:00:55,261 --> 00:00:58,868
Increment the circle's
X location by 1.

19
00:00:58,868 --> 00:01:03,247
How we gonna write that code? 
How are we going to write that code?

20
00:01:03,247 --> 00:01:09,400
Okay.
Rethinking, rethinking...

21
00:01:09,400 --> 00:01:12,719
One of the most relaxing
activities you can do in your life is...

22
00:01:12,719 --> 00:01:16,713
It's a little better when you buy it
yourself and not recording videos just...

23
00:01:17,053 --> 00:01:19,852
quietly and, like, thoroughly, uhm,

24
00:01:20,059 --> 00:01:22,960
clean a whiteboard. Anyway, okay, so...

25
00:01:22,990 --> 00:01:28,229
We have 'draw'.
It's looping

26
00:01:28,259 --> 00:01:32,140
over and over again. Run this code, go
back to beginning, run this code.

27
00:01:32,014 --> 00:01:35,969
And we have this circle that
is right now being drawn

28
00:01:35,969 --> 00:01:38,992
at pixel location 50 which
is the value of 'circleX'.

29
00:01:38,992 --> 00:01:43,189
What we want to do is wanna say:
'Hey, every time through 'draw'...

30
00:01:43,189 --> 00:01:46,618
let's give 'circleX' a new value.

31
00:01:46,618 --> 00:01:52,987
What should its new value be?
It should be its current value

32
00:01:52,987 --> 00:01:54,461
plus 1.

33
00:01:55,731 --> 00:01:59,999
Now, this assignment operation, this
expression might look a little strange

34
00:01:59,999 --> 00:02:01,229
to you.
Almost as if it's

35
00:02:01,229 --> 00:02:04,675
some sort of weird paradox. Like:
'No! Nothing can equal itself plus 1...

36
00:02:04,735 --> 00:02:06,433
That doesn't make any sense.'

37
00:02:06,433 --> 00:02:09,495
But we have to remember:
what an assignment operation does

38
00:02:09,495 --> 00:02:13,359
is evaluate the right
side of an equation.

39
00:02:13,359 --> 00:02:17,560
This pen is squeaking like crazy
and I have another one.

40
00:02:17,560 --> 00:02:21,940
I had another-- Here we go. It's evaluate
the right hand side of the equation

41
00:02:22,004 --> 00:02:25,203
and take the result of that value,
ah, much better,

42
00:02:25,239 --> 00:02:29,670
and store it in the left hand side.
So if 'circleX' currently

43
00:02:29,670 --> 00:02:33,667
has the value of 50, we
evaluate 50 + 1

44
00:02:33,667 --> 00:02:37,271
which becomes 51 and 
then that gets stored

45
00:02:37,271 --> 00:02:40,512
and 'circleX' is now 51.
And if..

46
00:02:40,512 --> 00:02:44,201
what's happening in 
that beginning of 'draw'?

47
00:02:44,209 --> 00:02:47,620
We are drawing circle a--
we're drawing an ellipse

48
00:02:47,642 --> 00:02:50,810
at 'circleX'. Then, we come back here

49
00:02:50,810 --> 00:02:54,164
and draw it at 51.Then, 51 + 1 is 52.

50
00:02:54,164 --> 00:02:57,712
Then, we come back here and draw it 
at 52 then increment that by 1.

51
00:02:57,712 --> 00:03:01,128
This is the process. This is the
type of thing, this is like,

52
00:03:01,128 --> 00:03:04,795
such a simple, little, like basic
scenario. All it's doing

53
00:03:04,795 --> 00:03:08,644
is moving that circle left to right. But
this is the foundation of everything

54
00:03:08,644 --> 00:03:10,327
you might ever possibly want to do.

55
00:03:10,327 --> 00:03:14,088
It's coming up with an algorithm, what is
the logic behind what I'm doing

56
00:03:14,088 --> 00:03:17,037
and implementing that through code.
So, uhm--

57
00:03:17,037 --> 00:03:22,094
So let's take a look at adding this
into our program.

58
00:03:22,094 --> 00:03:26,186
So, where are we going to do that?
We could say: oh, should I put it up

59
00:03:26,186 --> 00:03:27,414
here?

60
00:03:27,484 --> 00:03:30,852
Or maybe I should put it at the bottom.
It actually in many ways

61
00:03:30,852 --> 00:03:32,231
doesn't really matter.

62
00:03:32,231 --> 00:03:36,060
One thing that I often like to do is
separate out. We can say like this is my

63
00:03:36,069 --> 00:03:37,552
drawing stuff.

64
00:03:37,862 --> 00:03:41,751
And this is my, like, logical,
manipulation and I don't know what, like--

65
00:03:42,201 --> 00:03:44,838
Moving, er, variables.

66
00:03:44,838 --> 00:03:47,864
I don't know what I'm saying.
I really have no idea, but--

67
00:03:47,864 --> 00:03:52,001
drawing stuff plus-- just like logic over
here. Let's call it logic, for a second.

68
00:03:52,001 --> 00:03:53,866
You don't have to separate this but I'm

69
00:03:53,866 --> 00:03:57,010
gonna do that just for, uhm, kinda
keeping our code nice and clean.

70
00:03:57,010 --> 00:04:01,008
So, I'm gonna say:
circleX = circleX + 1;

71
00:04:01,026 --> 00:04:04,896
We're going to run it and look:
there it is, the circle is moving.

72
00:04:05,006 --> 00:04:08,148
It's so nice and lovely.
Hello. Goodbye.

73
00:04:08,148 --> 00:04:11,971
It's gonna leave and its gonna be sad,
because you know: +1,+1,+1

74
00:04:11,979 --> 00:04:16,214
+1. It's still actually incrementing. Over
and over again. Going further and further.

75
00:04:16,214 --> 00:04:20,083
In Processing, by the way, it doesn't
matter: you can tell it to draw something

76
00:04:20,083 --> 00:04:23,150
at a pixel value that is not
within the window. It--

77
00:04:23,150 --> 00:04:26,039
You will not see it appear. It's
not like suddenly appear over here

78
00:04:26,039 --> 00:04:27,032
in our computer screen

79
00:04:27,032 --> 00:04:30,393
but it is sort of being done in
the sort of mind of Processing.

80
00:04:30,393 --> 00:04:34,065
So we can say: look at this
circleX = circleX + 1.

81
00:04:34,065 --> 00:04:37,893
We did it. Now we have the animation.
Okay.

82
00:04:38,013 --> 00:04:42,076
So there are a few additional items
here that I want to discuss.

83
00:04:42,076 --> 00:04:47,026
Number 1. is: what if we wanted
to go twice as fast?

84
00:04:47,026 --> 00:04:51,343
That-- that's pretty easy:
circleX = circleX + 2;

85
00:04:51,343 --> 00:04:55,376
Let's move 2 pixels every frame. What
if we wanted to go ten times as fast?

86
00:04:55,376 --> 00:04:59,427
circleX = circleX + 10;
Now we're going

87
00:04:59,427 --> 00:05:02,676
10 pixels per frame. We can see it
zoom right of the screen.

88
00:05:02,676 --> 00:05:06,141
What if we wanted to go half as fast?

89
00:05:06,141 --> 00:05:10,467
Okay, circleX = cirrcleX + 1;

90
00:05:10,467 --> 00:05:15,236
What is half of 1? 0.5

91
00:05:15,236 --> 00:05:20,496
We run this and-- Oookay, look at this.
Look at that message.

92
00:05:20,496 --> 00:05:25,955
'cannot convert from float to int this.'
This is what we mean by using a strictly

93
00:05:25,955 --> 00:05:31,690
typed language. All of the sudden, we
introduced a floating-point value:

94
00:05:31,729 --> 00:05:36,525
0.5, a decimal number, but yet
we declared our variable

95
00:05:36,625 --> 00:05:42,039
a type integer and an integer
cannot be 1.5, 2.5.

96
00:05:42,039 --> 00:05:46,058
However, we can make this work by

97
00:05:46,099 --> 00:05:50,224
changing the value of circleX
to a float. Now,

98
00:05:50,224 --> 00:05:53,736
you might just suddenly feel like awesome
dive right in, run it, let's do it

99
00:05:53,736 --> 00:05:54,481
but

100
00:05:54,481 --> 00:05:57,302
if you really think about this for a
moment you'll start to

101
00:05:57,302 --> 00:06:00,330
think, like, something is
horribly wrong here.

102
00:06:00,349 --> 00:06:03,484
What-- what's happening--

103
00:06:03,504 --> 00:06:06,649
I mean, I have a window
in the computer

104
00:06:06,649 --> 00:06:11,854
There is a window in the computer and
we said: I can draw something at like

105
00:06:11,867 --> 00:06:16,716
pixel 50, 180, right? And we put
our circle there

106
00:06:16,736 --> 00:06:20,391
and there it is pixel 50, 180.
What if I said to you:

107
00:06:20,391 --> 00:06:25,793
draw this circle at pixel 50.5, 180.

108
00:06:25,793 --> 00:06:28,018
Well, you would say like: No!

109
00:06:28,018 --> 00:06:31,176
Absolutely not.
I showed you no such thing.

110
00:06:31,176 --> 00:06:34,456
There's no such thing
as pixel 50.5.

111
00:06:34,456 --> 00:06:38,028
There's pixel 50 and there's pixel 51,
but there's no pixel

112
00:06:38,028 --> 00:06:41,506
50.5, like, I counted those
pixels on the screen

113
00:06:41,506 --> 00:06:44,998
1,2,3,4,5 right? But, here's the thing:

114
00:06:45,018 --> 00:06:50,605
even though there is technically
no pixel 50.5, pixel 50.8,

115
00:06:50,605 --> 00:06:54,408
Processing allows you to use floating
point values, when you want to draw

116
00:06:54,408 --> 00:06:56,029
something in the window

117
00:06:56,029 --> 00:07:00,075
and what it does secretly is it just
lops of the decimal point.

118
00:07:00,075 --> 00:07:04,820
So, if you asked to draw something
50.5, you will get it at

119
00:07:04,820 --> 00:07:07,494
really at pixel 50. Now,
why is this so useful?

120
00:07:07,494 --> 00:07:11,663
Let's think about this idea
of a circle moving quickly,

121
00:07:11,723 --> 00:07:14,939
or slowly, okay?

122
00:07:15,009 --> 00:07:19,011
These could be its values every
frame: pixel 50, 51, 52,

123
00:07:19,011 --> 00:07:22,197
53, 54, 55, right? If we
wanted to move faster

124
00:07:22,197 --> 00:07:26,427
50, 55, 60, 65, right? Move
five pixels per frame.

125
00:07:26,427 --> 00:07:30,005
But, what if we do this: 50,

126
00:07:30,027 --> 00:07:34,841
50.5, 51, 51.5, 52

127
00:07:35,011 --> 00:07:38,523
52.5, right? It won't actually

128
00:07:38,523 --> 00:07:41,757
be drawing the circle at pixel 50.5.

129
00:07:41,757 --> 00:07:45,756
It will just draw it at the pixel
50 twice. But if its running

130
00:07:45,756 --> 00:07:49,849
30 frames per second and we
draw it at the same location twice,

131
00:07:49,849 --> 00:07:54,116
it's going to appear as if it's moving more
slowly. Now, we could implement all sorts

132
00:07:54,116 --> 00:07:57,677
of crazy logic, we could try sort of
change, there's a function in Processing

133
00:07:57,697 --> 00:08:01,084
called frameRate which would actually slow
frame rate of the entire application down.

134
00:08:01,084 --> 00:08:04,366
But this is now we want. What if we
want one thing moving really fast

135
00:08:04,366 --> 00:08:07,463
and one thing moving really slow?
We need to manipulate, uhm,

136
00:08:07,973 --> 00:08:12,032
the locations and sizes of things.
Using floating-points

137
00:08:12,032 --> 00:08:15,022
allows us to have more precision
over the speed

138
00:08:15,022 --> 00:08:18,501
and, uhm, kinda new ones
of hell things happen

139
00:08:18,501 --> 00:08:22,026
visually in our program. So, this is
kinda like a long explanation but

140
00:08:22,026 --> 00:08:26,702
What I'd say is-- I would
suggest to you right now:

141
00:08:26,702 --> 00:08:31,001
that for the time being just
use the float for everything.

142
00:08:31,001 --> 00:08:34,662
There are cases where you absolutely
want a whole number, but in the case

143
00:08:34,662 --> 00:08:37,965
of drawing a pixel, drawing shapes at

144
00:08:38,005 --> 00:08:41,010
locations, drawing sizes of shapes,
manipulating the sizes.

145
00:08:41,010 --> 00:08:44,268
We really want to use floats and let's
take a look at that over here.

146
00:08:44,268 --> 00:08:47,680
So, once we have float and I run it,

147
00:08:47,680 --> 00:08:50,846
we can see that's moving half as fast.

148
00:08:50,846 --> 00:08:53,113
And if I say 0.1...

149
00:08:54,013 --> 00:08:57,074
You know it's really moving really slowly.

150
00:08:57,474 --> 00:09:00,552
But it's moving. And you can't tell
that it's really sitting

151
00:09:01,052 --> 00:09:05,353
at the same-- I mean if you kinda like look
at it really really carefully maybe you

152
00:09:05,362 --> 00:09:06,128
can but

153
00:09:06,128 --> 00:09:09,067
the frame rate is fast enough it just looks
like it's inching its way along.

154
00:09:09,097 --> 00:09:11,096
And you can even do stuff like

155
00:09:11,096 --> 00:09:13,829
point, I don't know I'm kinda going
crazy here, 0.01.

156
00:09:14,029 --> 00:09:18,905
We can say: Okay, it's moving, but it's
moving so slowly we can barely perceive it.

157
00:09:18,905 --> 00:09:21,753
So, but, you know, if we-- 
If I went to, like,

158
00:09:21,963 --> 00:09:26,451
take a walk around outside for a little bit
clear my head, come back, it'd probably

159
00:09:26,451 --> 00:09:27,893
be quite a bit further along

160
00:09:27,893 --> 00:09:33,129
on the screen. Okay, so floating-points
allow you to do a lot. Okay.

161
00:09:33,129 --> 00:09:36,114
This is good, good
place to stop.

162
00:09:36,114 --> 00:09:40,046
We've done quite a bit here, even though
it seems like we've barely done anything.

163
00:09:40,046 --> 00:09:42,152
We just have this little circle moving.

164
00:09:42,152 --> 00:09:45,129
What I would say to you right now, is:
go to your sketch,

165
00:09:46,029 --> 00:09:49,342
you have variables you declared at
the top, make them floats.

166
00:09:49,342 --> 00:09:50,810
give all those variables initial values

167
00:09:51,003 --> 00:09:54,006
and then try manipulating those values.
Can you make

168
00:09:54,006 --> 00:09:58,230
something grow, can you make something
shrink, can you make something change color?

169
00:09:58,230 --> 00:10:01,523
What can you do with variables at this
point?

170
00:10:01,523 --> 00:10:05,087
Uhm, and-- in the next video we're going
to look at how we can actually

171
00:10:05,087 --> 00:10:08,306
give things random values
to create certain other

172
00:10:09,089 --> 00:10:12,354
er, additional variation in our
programs. And then of course

173
00:10:12,839 --> 00:10:16,023
at some point, in the next
set of videos we need to

174
00:10:16,023 --> 00:10:21,349
figure out how to get this thing to turn
around when it hits the edge.

175
00:10:21,349 --> 00:10:25,110
Right? How do we have a conditional,
a condition in our code--

176
00:10:25,261 --> 00:10:26,548
How do we say:

177
00:10:26,548 --> 00:10:30,306
if that circle reaches the edge, turn
around and move the other way.

178
00:10:30,306 --> 00:10:34,549
Right? Instead of saying
circleX + 1 now say circleX - 1

179
00:10:34,549 --> 00:10:38,264
How do we make that happen? That's where
we're going towards here. But, at first,

180
00:10:38,264 --> 00:10:41,088
we just wanna get used to having
variable, storing data and

181
00:10:41,088 --> 00:10:48,160
that sort of thing. Okay.
Uhm, actually, hello!

182
00:10:48,160 --> 00:10:51,337
What I forgot to say was: a simple
exercise you might do with this

183
00:10:51,337 --> 00:10:55,617
is just add the Y component to it, right?
Take this program

184
00:10:55,617 --> 00:11:00,102
add circleY, add certain-- give circleY
initial value and give circleY

185
00:11:00,102 --> 00:11:04,816
an initial speed as well, increment
circleY by some value

186
00:11:04,816 --> 00:11:08,851
and see if you can get to move in
addition to the x-axis along the y-axis.
