1
00:00:02,054 --> 00:00:03,535
We're very close now.

2
00:00:03,535 --> 00:00:08,255
We're just a few videos away from actually
opening up a Processing window and typing

3
00:00:08,255 --> 00:00:09,192
in some lines of

4
00:00:09,192 --> 00:00:11,808
code, running our code and having our first
computer program.

5
00:00:11,808 --> 00:00:16,534
But I think before we do that I want
to talk about something which is -

6
00:00:16,534 --> 00:00:19,441
okay - let's just say -

7
00:00:19,441 --> 00:00:23,461
It's Time to Learn Programming, then the
big question arrives

8
00:00:23,461 --> 00:00:28,408
What programming language should I learn?
What's my project? What am I doing? What's

9
00:00:28,408 --> 00:00:30,981
the right environment? What's the right
language? And this -

10
00:00:30,981 --> 00:00:33,835
this is a question that's loaded with

11
00:00:33,835 --> 00:00:39,501
anxiety and confusion and, "Oh! What if I'm
learning the wrong thing?" and "Shouldn't I

12
00:00:39,501 --> 00:00:40,657
be really learning this?" and I

13
00:00:40,657 --> 00:00:44,179
first I just want to say a general
comment first before we

14
00:00:44,179 --> 00:00:48,906
to take a programming languages. There is no
perfect programming language. There is no

15
00:00:48,906 --> 00:00:52,001
perfect programming environment that
will do everything you always wanted it to

16
00:00:52,001 --> 00:00:55,333
do is perfect and exactly right for the
particular project you're making

17
00:00:55,333 --> 00:01:00,592
and often the answer to that question is,
you know,

18
00:01:00,592 --> 00:01:03,612
the answer to the question "what programming
language should use?" it's the one that

19
00:01:03,612 --> 00:01:04,384
you just sorta

20
00:01:04,384 --> 00:01:07,998
feel comfortable with how it looks good
kinda like you're happy to get started

21
00:01:12,548 --> 00:01:13,257
and

22
00:01:07,998 --> 00:01:12,548
the one that you're using right now.
Better to be writing code and making

23
00:01:13,257 --> 00:01:13,893
something

24
00:01:13,893 --> 00:01:16,747
then to be spending all day worrying
about trying to find that perfect

25
00:01:16,747 --> 00:01:17,621
language so

26
00:01:17,621 --> 00:01:20,812
in a sense, one answer is, "Pick something
get started."

27
00:01:20,812 --> 00:01:24,622
You can learn this language and try this
one later and another one later

28
00:01:24,622 --> 00:01:28,693
it doesn't really matter. But for us we
have to come to a decision and in many

29
00:01:28,693 --> 00:01:29,089
ways

30
00:01:29,089 --> 00:01:31,712
I'm picking a programming language
and environment

31
00:01:31,712 --> 00:01:35,763
which is one that I'm comfortable with.
It's one that I work on. It's one that I've

32
00:01:35,763 --> 00:01:37,420
known for many years. I's not perfect.

33
00:01:37,420 --> 00:01:41,105
- and so that's what you will be learning.
And and hopefully

34
00:01:41,105 --> 00:01:44,046
you will find other languages
and environments in your life

35
00:01:44,046 --> 00:01:47,543
and this will have helped to you to that end.

36
00:01:47,543 --> 00:01:51,335
So let's just - first though - okay so let's think
about what are -

37
00:01:51,335 --> 00:01:54,001
what's the kind of map

38
00:01:54,001 --> 00:01:58,584
of programming languages that are out
there and what what are the sort of pros

39
00:01:58,584 --> 00:02:01,970
and cons advantages and disadvantages
using different languages

40
00:02:05,260 --> 00:02:07,730
Hello! Okay! So one thing we can look at

41
00:02:07,730 --> 00:02:12,061
(I'll provide a link to this) this is a nice
little chart called, "The History of Programming

42
00:02:12,061 --> 00:02:13,453
Languages," I think it's available from

43
00:02:13,453 --> 00:02:16,476
O'Reilly, and we can first at least see 
like back here

44
00:02:16,476 --> 00:02:20,320
in 1954 the invention of Fortran

45
00:02:20,320 --> 00:02:24,321
which you can see right here we can
start to kind of like scroll around this

46
00:02:24,321 --> 00:02:25,724
thing, we can see that there are

47
00:02:25,724 --> 00:02:28,685
zillions of languages and they have
various relationships and they all have funny

48
00:02:28,685 --> 00:02:29,518
names like Oberon

49
00:02:29,518 --> 00:02:34,944
AINSI C and Ada and all sorts of other stuff.
The other thing I should point out about this nice

50
00:02:34,944 --> 00:02:35,830
little graph/chart

51
00:02:35,830 --> 00:02:38,704
is that ends in 2004 so

52
00:02:38,704 --> 00:02:42,726
a lot has happened by the way the last
ten years nine or ten years

53
00:02:42,726 --> 00:02:45,879
there's a lot of other languages a lot
of other innovations on this chart if

54
00:02:45,879 --> 00:02:47,046
you were to continue it

55
00:02:47,046 --> 00:02:50,381
would get even bigger and crazier but
you know just looking at you realize

56
00:02:50,381 --> 00:02:53,640
oh, my goodness, it's totally overwhelming.

57
00:02:53,704 --> 00:02:57,712
look how many language there are. We
could also kind of go to Wikipedia there's

58
00:02:57,712 --> 00:03:01,493
"Comparison of Programming Languages" page
and you can scroll down and see, look

59
00:03:01,538 --> 00:03:04,617
all these possible languages. There
are zillions of them. So

60
00:03:04,617 --> 00:03:09,012
I think we can kind of make our own
little list, just to kind of -

61
00:03:09,012 --> 00:03:12,897
you know you've probably heard -
this would be the moment where I'd say, "Hey,

62
00:03:12,897 --> 00:03:16,387
everyone out there, the three of you
watching this video,

63
00:03:16,387 --> 00:03:20,553
raise your raise your hand and shout out a
programming language that you've heard of,"

64
00:03:20,553 --> 00:03:24,781
and you might say, "Pascal!"

65
00:03:24,781 --> 00:03:27,906
(probably none of you has heard of Pascal) but -

66
00:03:27,906 --> 00:03:30,393
Pascal - (Ooh, boy this pen doesn't work)

67
00:03:30,393 --> 00:03:38,477
Pascal. There we go. You might say
C. You might say Java.

68
00:03:38,477 --> 00:03:41,423
You might even say something like, "Oh,
what this thing,

69
00:03:41,423 --> 00:03:43,727
'Assembly Language' or 'Machine Language?'"

70
00:03:45,707 --> 00:03:47,289
I'll write Assembly Language down here.

71
00:03:47,289 --> 00:03:50,516
And you might say, "Oh, what about ActionScript?"

72
00:03:50,516 --> 00:03:54,913
And you might even learn something -

73
00:03:54,913 --> 00:03:59,057
have heard of something - probably you haven't, 
but the first programming - one of the first

74
00:03:59,057 --> 00:04:00,093
programming languages I learned actually

75
00:04:00,093 --> 00:04:04,026
was "Lingo," which was the programming
language of Macromedia's Director which I

76
00:04:04,026 --> 00:04:07,921
believe still exists? Anyway

77
00:04:07,921 --> 00:04:10,826
so we could start making this list, and I
kinda started doing this I think I

78
00:04:10,826 --> 00:04:12,580
probably put Pascal in the wrong place but

79
00:04:12,580 --> 00:04:16,307
what I've - one of the things i wanna talk
about with this kinda list of programming

80
00:04:16,307 --> 00:04:17,732
languages and what you might pick -

81
00:04:17,732 --> 00:04:21,953
and I'm gonna say say C++ / Objective-c

82
00:04:21,953 --> 00:04:27,478
is this idea of low level

83
00:04:27,508 --> 00:04:32,501
versus high level

84
00:04:32,501 --> 00:04:36,887
and this is kinda lowel-level
[corrects spelling error] low-level

85
00:04:36,887 --> 00:04:39,812
high-level this is an important concept
that comes up in

86
00:04:39,812 --> 00:04:42,875
thinking about programming languages,
right? So

87
00:04:42,875 --> 00:04:48,716
essentially let's say you want to write
the lowest level possible code,

88
00:04:48,716 --> 00:04:51,895
that you were completely insane
person who wanted to just like

89
00:04:51,895 --> 00:04:54,978
torture yourself for eternity, you would

90
00:04:54,978 --> 00:04:58,300
you would say I'm only going to write my
computer program as a sequence

91
00:04:58,300 --> 00:05:00,954
zeros and ones, right? Because ultimately

92
00:05:00,954 --> 00:05:05,780
so here's mine - you know this -

93
00:05:05,780 --> 00:05:10,041
execute this code - it's amazing - it's
beautiful. Here this is my program,

94
00:05:10,041 --> 00:05:13,329
right? (and I guess you can see it because I
wrote off the edge of the screen)

95
00:05:13,329 --> 00:05:18,359
but let's just say this is your
program - what am I talking about?

96
00:05:18,359 --> 00:05:22,122
Okay, this is like the lowest -
essentially everything that executes on

97
00:05:22,122 --> 00:05:24,273
your computer - all data - is stored -

98
00:05:24,273 --> 00:05:27,421
all instructions are stored as a
sequence of zeros and ones.

99
00:05:27,421 --> 00:05:30,067
But this is unrealistic. 
How could you possibly

100
00:05:30,067 --> 00:05:33,473
really be expected to write software

101
00:05:33,473 --> 00:05:37,586
just as a series of 0's and 1's? So
there's generally a process where

102
00:05:37,586 --> 00:05:41,076
you want to be able to write your code in
a higher level way

103
00:05:41,076 --> 00:05:45,431
the ultimate like - if I'm creating a
graphics application, which is what we're

104
00:05:45,431 --> 00:05:46,430
going to be doing,

105
00:05:46,430 --> 00:05:49,760
a really high level programs might
say - might be written something like this

106
00:05:49,760 --> 00:05:54,020
draw a red square - draw a square on the
screen that's like medium size and red

107
00:05:54,020 --> 00:05:54,678
colored

108
00:05:54,678 --> 00:05:58,499
and draw circle that's really big and blue.
That's very high level. It

109
00:05:58,499 --> 00:06:01,439
really is like English and 
what happens is

110
00:06:01,439 --> 00:06:05,541
there's a compiler that will take that high-level

111
00:06:05,541 --> 00:06:10,157
code and translate it into machine language.

112
00:06:10,157 --> 00:06:14,768
So assembly language is kinda want to
the lowest level programming languages

113
00:06:14,768 --> 00:06:15,529
that people use.

114
00:06:15,529 --> 00:06:19,746
When C came around, C was often
refered to in

115
00:06:19,746 --> 00:06:23,768
this kind of like oxymoron type way

116
00:06:23,768 --> 00:06:27,735
a high-level low-level language meaning it's
high-level

117
00:06:27,735 --> 00:06:30,881
in that you're writing code that starts to
have higher-level,

118
00:06:30,881 --> 00:06:36,213
more English-like constructs, but it still
allows you the low-level access to the

119
00:06:36,213 --> 00:06:37,327
computer -

120
00:06:37,327 --> 00:06:41,317
direct access to the computer's memory - lots
of stuff that you can do it makes it

121
00:06:41,317 --> 00:06:42,783
very very very - you can

122
00:06:42,783 --> 00:06:46,773
execute very very fast. So anyway that's just
kind of an important concept to realize

123
00:06:46,773 --> 00:06:49,639
most of the languages that I haven't
kind of written up here

124
00:06:49,639 --> 00:06:54,272
which I'll kind of like add over here
like - that you may have heard of- like Ruby,

125
00:06:54,272 --> 00:06:58,886
JavaScript, Python,

126
00:06:58,886 --> 00:07:01,552
and we could keep going here, 
we could write lot others

127
00:07:01,552 --> 00:07:05,052
these are all generally high-level
programming languages.

128
00:07:05,052 --> 00:07:07,442
Now there's another kind interesting
little component

129
00:07:07,442 --> 00:07:09,103
that I think that I'll mention

130
00:07:09,103 --> 00:07:12,593
which is this idea of a language 
that's 'compiled'

131
00:07:12,593 --> 00:07:17,093
versus 'interpreted' - now in many ways I almost
want to stop myself and not talk about this

132
00:07:17,093 --> 00:07:21,468
because - we don't really - these are some
details that when we're first

133
00:07:21,468 --> 00:07:22,081
learning to program

134
00:07:22,081 --> 00:07:25,664
we're gonna put aside. We just want to write
the code run it and make stuff happen

135
00:07:25,664 --> 00:07:28,822
but it's something to think about as you
start getting to this larger world

136
00:07:28,822 --> 00:07:30,018
of programming languages.

137
00:07:30,018 --> 00:07:33,777
So let's say you're writing a program in C,
right?

138
00:07:33,777 --> 00:07:36,380
You write out the text-based instructions

139
00:07:36,380 --> 00:07:40,300
in your high-level language. That program
gets compiled

140
00:07:40,300 --> 00:07:44,392
down into the sort of lowest level program
which is

141
00:07:44,392 --> 00:07:47,933
like one level below Assembly Language, which is
Machine Language

142
00:07:47,933 --> 00:07:52,192
the zeros and ones. Then it can be run.
This is great;

143
00:07:52,192 --> 00:07:54,953
it makes it run it makes run very very
very fast

144
00:07:54,953 --> 00:07:56,305
but it is -

145
00:07:56,305 --> 00:08:00,701
- is different that some languages that we
have now that are interpreted,

146
00:08:00,701 --> 00:08:02,768
JavaScript being one of those.

147
00:08:02,768 --> 00:08:07,221
A language which is interpreted is
actually -

148
00:08:07,221 --> 00:08:11,349
while the program is running - it is
reading your code line by line and

149
00:08:11,349 --> 00:08:14,463
executing the program. This allows for
things like

150
00:08:14,463 --> 00:08:18,690
live coding, right? If a program is
actually reading the code as it's running

151
00:08:18,690 --> 00:08:19,585
you could

152
00:08:19,585 --> 00:08:22,697
change the code as it's running and the
program would change in real time

153
00:08:22,697 --> 00:08:26,490
which cannot happen in a compiled language
because you've got to write your code,

154
00:08:26,490 --> 00:08:30,219
compile, then run it. So I the reason why
mention this

155
00:08:30,219 --> 00:08:33,187
is we're using - we are going to use Processing

156
00:08:33,187 --> 00:08:37,300
(am I recording? Yes?)

157
00:08:37,300 --> 00:08:39,613
We're going to use Processing which

158
00:08:39,613 --> 00:08:42,841
is, and our code is actually going to be
compiled before it's run

159
00:08:42,841 --> 00:08:46,393
which is something we'll see as we start to
first write our programs.

160
00:08:46,393 --> 00:08:49,849
Another topic that I want to bring up is
this idea of

161
00:08:49,849 --> 00:08:53,995
'client-side' versus 'server-side'
programming. This is an important

162
00:08:53,995 --> 00:08:54,933
question because

163
00:08:54,933 --> 00:08:58,289
you know you you might have project
ideas in your head

164
00:08:58,289 --> 00:09:02,224
things that you want to make and one
thing might be, "I had this idea for this

165
00:09:02,224 --> 00:09:03,775
kinda interactive

166
00:09:03,775 --> 00:09:07,404
exhibit about dinosaurs for a science museum."

167
00:09:07,404 --> 00:09:10,441
In that sense you might be building a client-side

168
00:09:10,441 --> 00:09:14,004
application a desktop application that's
gonna run maybe it reads some

169
00:09:14,004 --> 00:09:17,232
pixels from a camera so the user can
interact with in a draw some

170
00:09:17,232 --> 00:09:20,587
dinosaur footprints to the screen or
something like that.

171
00:09:20,587 --> 00:09:24,611
You might also have an idea for, "Oh, I have this
website I want to make

172
00:09:24,611 --> 00:09:28,191
where the user enters all this
information about - personal information

173
00:09:28,191 --> 00:09:29,146
about themselves -

174
00:09:29,146 --> 00:09:31,970
and it gives them back their horoscope." so

175
00:09:31,970 --> 00:09:36,524
these are different applications and
require a different set of programming

176
00:09:36,524 --> 00:09:37,730
languages for them,

177
00:09:37,730 --> 00:09:40,853
and one thing that we can see here
i mean all

178
00:09:40,853 --> 00:09:45,738
this idea of anytime you go to a web
page - if this is my web browser -

179
00:09:45,738 --> 00:09:51,497
and you type in, you know, "Google.com"
and you search for something

180
00:09:51,497 --> 00:09:56,079
you are sending a request to a server

181
00:09:56,079 --> 00:09:59,505
in the cloud which - it's not really a
cloud - it's an underground bunker basically

182
00:09:59,505 --> 00:10:00,862
with some servers, but you could

183
00:10:00,862 --> 00:10:03,797
think of it as a nice cloud floating in
the sky -

184
00:10:03,797 --> 00:10:10,401
where a program - a server-side program -
"a server-side program" executes

185
00:10:10,401 --> 00:10:15,307
and returns information back to you so
you can see the result

186
00:10:15,307 --> 00:10:19,035
in the browser. This is different

187
00:10:19,035 --> 00:10:23,358
then, perhaps, there being an animation in
the browser that's running

188
00:10:23,358 --> 00:10:27,857
that you click on and when you click on
it it makes little pretty fireworks. That

189
00:10:27,857 --> 00:10:30,909
might be something written in JavaScript

190
00:10:30,909 --> 00:10:34,211
that is executing on the client side, this
animation that's running

191
00:10:34,211 --> 00:10:35,747
locally on your computer

192
00:10:35,747 --> 00:10:39,761
and reading your mouse clicks. The server
side programming is this thing that

193
00:10:39,761 --> 00:10:42,722
happens when you have to request the
program runs it says you data back.

194
00:10:42,722 --> 00:10:47,501
Perhaps that's written in Python. Now
there are lots of different languages. In

195
00:10:47,501 --> 00:10:49,261
some languages you can write,

196
00:10:49,261 --> 00:10:53,241
you know, in JavaScript you can write
client-side programs, and in Javascript you can

197
00:10:53,241 --> 00:10:55,562
write server-side programs something
called Node.js - it's not

198
00:10:55,562 --> 00:10:58,946
language-specific, but conceptually
there's a different thing going on here.

199
00:10:58,946 --> 00:11:03,706
Are you writing a program that is executing
locally on your laptop? You know, here on

200
00:11:03,706 --> 00:11:08,290
my prop here there's a
program running on this laptop. It is drawing

201
00:11:08,290 --> 00:11:09,360
pixels to the screen.

202
00:11:09,360 --> 00:11:13,135
That is a client-side program. There's a
program running

203
00:11:13,135 --> 00:11:14,539
somewhere else on a server

204
00:11:14,539 --> 00:11:18,800
that is sending me information
back about how excellent my jog was

205
00:11:18,800 --> 00:11:20,464
this morning or whatever from the

206
00:11:20,464 --> 00:11:24,192
RunKeeper website or whatever but (I
guess I just plugged RunKeeper.

207
00:11:24,192 --> 00:11:24,880
I like it)

208
00:11:24,880 --> 00:11:28,713
That's a server-side program. So this is
an important consideration when you're

209
00:11:28,713 --> 00:11:30,243
learning programming languages

210
00:11:30,243 --> 00:11:33,828
and you're creating applications with
them, and this is something you want

211
00:11:33,828 --> 00:11:36,201
familiarity with, both client-side and
server-side.

212
00:11:36,201 --> 00:11:41,295
This video series that I'm doing, while we
will refer to and demonstrate some

213
00:11:41,295 --> 00:11:42,317
examples that

214
00:11:42,317 --> 00:11:46,013
involve server-side programming later, on is
really focused on

215
00:11:46,013 --> 00:11:49,741
client-side programs. We're going to be
writing

216
00:11:49,741 --> 00:11:52,824
applications that open a window on your
computer screen

217
00:11:52,824 --> 00:11:56,709
draw pixels, draw text, draw things to
that window,

218
00:11:56,709 --> 00:12:00,812
and that you can interact with on your
laptop, so were really learning

219
00:12:00,812 --> 00:12:04,332
client-side, which I think is an
important thing to note.

220
00:12:04,332 --> 00:12:07,155
And this brings up kinda where with

221
00:12:07,155 --> 00:12:10,445
we're kinda finishing off here so

222
00:12:10,445 --> 00:12:12,352
if you want to do stuff for the web,

223
00:12:12,352 --> 00:12:16,531
there are a lot of fantastic resources
out there for you to learn

224
00:12:16,531 --> 00:12:19,873
web programming. JavaScript is a
terrific

225
00:12:19,873 --> 00:12:23,133
programming language to learn has lots of
applications

226
00:12:23,133 --> 00:12:28,486
Python is another fantastic language
to learn as a beginner,

227
00:12:28,486 --> 00:12:32,788
but we're going to use something called
Processing, and I'm going to writet

228
00:12:32,788 --> 00:12:37,089
"Processing" right here

229
00:12:37,089 --> 00:12:39,914
and I'm going to draw up like a weird
little arrow there

230
00:12:39,914 --> 00:12:43,558
that is pointing back to Java. 
So what is Processing?

231
00:12:43,558 --> 00:12:47,336
Processing (I really should be able to say it)

232
00:12:47,336 --> 00:12:50,712
Processing was developed - was created - in 2001

233
00:12:50,712 --> 00:12:55,990
by Casey Reas and Benjamin Fry while they were
students at the MIT Multimedia Lab

234
00:12:55,990 --> 00:12:57,610
under John Maeda

235
00:12:57,610 --> 00:13:00,461
so what Processing really started as
was, "Hey,

236
00:13:00,461 --> 00:13:03,943
we need something to make these projects
we're making.

237
00:13:03,943 --> 00:13:08,398
Let's make something." 
So Processing is this

238
00:13:08,398 --> 00:13:11,336
really nice simple environment.

239
00:13:11,336 --> 00:13:14,761
You can download it. It's kind of all-in-one. 
You can open it.

240
00:13:14,761 --> 00:13:17,809
You can type some code. You can run it.
It works.

241
00:13:17,809 --> 00:13:19,812
So I'm gonna get to that in a second -

242
00:13:19,812 --> 00:13:24,117
more about why we're
using Processing, but let's just think - you've

243
00:13:24,117 --> 00:13:25,698
probably heard the term

244
00:13:25,698 --> 00:13:28,489
"Creative Coding."

245
00:13:28,489 --> 00:13:33,252
The term "Creative Coding" started as a
kind of catch-all phrase

246
00:13:33,252 --> 00:13:37,114
for people making creative applications
with code,

247
00:13:37,114 --> 00:13:40,237
trying to make Art, trying to make
installations, trying to make weird

248
00:13:40,237 --> 00:13:43,373
obscure impractical crazy ideas,

249
00:13:43,373 --> 00:13:46,728
and you know there's a lot of
discussion now, "Is this a good term? Is

250
00:13:46,728 --> 00:13:47,518
this a bad term?"

251
00:13:47,518 --> 00:13:52,121
One thing I think I heard from
Jer Thorp was you could think of it as

252
00:13:52,121 --> 00:13:55,070
"creative writing" 
- the process of writing for -

253
00:13:55,070 --> 00:13:58,963
the process writing code for
creative applications. There is also now

254
00:13:58,963 --> 00:14:02,122
the term "Poetic Computation," which
i think is interesting.

255
00:14:02,122 --> 00:14:04,758
But anyway, there are lots of
environments

256
00:14:04,758 --> 00:14:08,900
and I'll draw a line here - you might
have heard of something called

257
00:14:08,900 --> 00:14:13,664
"Open Frameworks." You might have heard
of something called "Cinder."

258
00:14:13,664 --> 00:14:16,390
These are creative coding
environments.

259
00:14:16,390 --> 00:14:19,585
These are libraries - frameworks -

260
00:14:19,585 --> 00:14:22,171
for writing code, and your

261
00:14:22,171 --> 00:14:24,408
code, though, is really C++.

262
00:14:24,408 --> 00:14:31,235
C++, even with all of its advantages in terms
of having low-level access to the machine

263
00:14:31,243 --> 00:14:35,323
is a very hard language to get started in
right from the beginning.

264
00:14:35,323 --> 00:14:39,874
You have to a have to manage that
memory. There's lots of stuff you have to

265
00:14:39,874 --> 00:14:40,468
learn about,

266
00:14:40,468 --> 00:14:44,865
like these things called "pointers."
There's --

267
00:14:44,865 --> 00:14:49,123
you've got to - using these environments
in addition to writing C++

268
00:14:49,123 --> 00:14:49,781
you've got to use

269
00:14:49,781 --> 00:14:53,143
on the Mac something called Xcode - the
development environments which are

270
00:14:53,143 --> 00:14:56,469
larger and more complex, so - 
I want to use in this

271
00:14:56,469 --> 00:14:59,607
video series something that's a bit
simpler that we can

272
00:14:59,607 --> 00:15:00,759
get started with

273
00:15:00,759 --> 00:15:04,020
a bit more quickly. But these are
terrific environments with a lot of

274
00:15:04,020 --> 00:15:10,311
similar qualities to Processing. The
other thing you might have heard of

275
00:15:10,311 --> 00:15:11,683
which I think is important to mention

276
00:15:11,683 --> 00:15:15,038
is something called max "Max/MSP/Jitter"

277
00:15:17,768 --> 00:15:21,161
I'm going to put this over here
somewhere:

278
00:15:21,161 --> 00:15:24,851
Max/MSP/Jitter

279
00:15:24,851 --> 00:15:28,420
and there's also something called PD
or "Pure Data."

280
00:15:28,420 --> 00:15:32,165
these are known as dataflow

281
00:15:32,165 --> 00:15:35,981
programming environments, and the interesting
thing about dataflow programming

282
00:15:35,981 --> 00:15:36,784
environments is you

283
00:15:36,784 --> 00:15:40,335
actually aren't actually writing your code 
as text. you're essentially

284
00:15:40,335 --> 00:15:43,855
designing a flow chart for how your
program should run.

285
00:15:43,855 --> 00:15:47,761
You're putting a box on the screen and
than giving that box some

286
00:15:47,761 --> 00:15:51,971
inputs and then connecting some data to those
inputs and then the box may have an

287
00:15:51,971 --> 00:15:55,197
output which goes to another box (and it
looks like an interesting little

288
00:15:55,197 --> 00:15:58,624
alien there) - So this is actually really
fantastic and

289
00:15:58,624 --> 00:16:01,522
for many people - many people
find

290
00:16:01,522 --> 00:16:06,414
this way of programming more intuitive
and easier to do. It's certainly works

291
00:16:06,414 --> 00:16:10,166
wonderfully for audio applications because
if you think about how an audio app -

292
00:16:10,166 --> 00:16:14,048
if you build audio system physically you
have a bunch of

293
00:16:14,048 --> 00:16:17,393
mixers and instruments and cables and
things have input and output

294
00:16:17,393 --> 00:16:21,572
go through stuff it eventually make it
to a speaker that comes out. So this idea

295
00:16:21,572 --> 00:16:24,706
of writing an audio application with the
dataflow programming environment

296
00:16:24,706 --> 00:16:28,463
is a - and you can certainly do graphics
applications and many other things.

297
00:16:28,463 --> 00:16:32,367
I would encourage you to look at
Max/MSP and PD. So

298
00:16:32,367 --> 00:16:36,212
there is huge world of stuff and you
could spend your life

299
00:16:36,212 --> 00:16:40,035
learning every programming language. You could
also spend your life worrying about

300
00:16:40,035 --> 00:16:43,294
"OMG which one should I use?" So I'm
gonna say

301
00:16:43,294 --> 00:16:46,815
to you right now, "Stop worrying."
If you feel like

302
00:16:46,815 --> 00:16:51,481
you don't like the way this video series is going

303
00:16:51,481 --> 00:16:54,741
then go to another resource online and
learn a different

304
00:16:54,741 --> 00:16:59,032
programming language. But what I will -
What we're going to use is Processing.

305
00:16:59,032 --> 00:17:02,454
And I'm going to very briefly now show
you kind of the core

306
00:17:02,454 --> 00:17:03,811
basic reason -

307
00:17:03,811 --> 00:17:08,698
one of the core reasons why Processing is
gonna work well here

308
00:17:08,698 --> 00:17:12,459
for learning to program. And so let me
walk over here

309
00:17:12,459 --> 00:17:15,353
and I'm going to switch over to the desktop -

310
00:17:15,353 --> 00:17:19,046
Processing is just an application. I've
downloaded it.

311
00:17:19,046 --> 00:17:24,176
It is already sitting here on the machine.
Where do you download it? I guess I

312
00:17:24,176 --> 00:17:24,841
might as well

313
00:17:24,841 --> 00:17:26,966
show you this right now. If you go to
Processing.org

314
00:17:26,966 --> 00:17:31,278
you can actually click here to
download Processing. I guess I'll mention that

315
00:17:31,278 --> 00:17:33,215
Processing is a non-profit foundation.

316
00:17:33,215 --> 00:17:36,876
You can make a donation when you
download, and that donation is tax-deductible

317
00:17:36,876 --> 00:17:41,141
but it is available for free. You are not
required by any means to donate and I

318
00:17:41,141 --> 00:17:43,589
would imagine maybe when you're just
first trying it out you wanna see if you

319
00:17:43,589 --> 00:17:44,351
like it first.

320
00:17:44,351 --> 00:17:48,818
But the other thing I should mention
here is all these creative coding

321
00:17:48,818 --> 00:17:49,547
environments,

322
00:17:49,547 --> 00:17:53,578
Open Frameworks, Cinder, Processing, these
environments

323
00:17:53,578 --> 00:17:56,806
live in this rich landscape of "Open Source."

324
00:17:56,806 --> 00:17:59,826
So what does this mean for it to be
"Open Source?" It means not only

325
00:17:59,826 --> 00:18:05,460
can you get - are you getting this
software these things are

326
00:18:05,460 --> 00:18:06,752
available to you for free (although

327
00:18:06,752 --> 00:18:11,699
Open Source doesn't have to be free)
[but it also means]

328
00:18:11,699 --> 00:18:15,367
that the source code how - these
things are written, right? - these are libraries

329
00:18:15,367 --> 00:18:18,501
that are applications - you can actually go and
read the source code, contribute to them,

330
00:18:18,501 --> 00:18:22,951
it is all completely open to you and all
this stuff is available in something

331
00:18:22,951 --> 00:18:25,097
called GitHub which is a

332
00:18:25,097 --> 00:18:29,000
website, essentially, for sharing open source
projects. But i digress.

333
00:18:29,000 --> 00:18:31,731
This is where you can get Processing and
download it.

334
00:18:31,731 --> 00:18:33,832
Once you have it on your machine

335
00:18:33,832 --> 00:18:36,561
you can run the application and you can
see here

336
00:18:36,561 --> 00:18:40,916
when you run it you're going to get
this window like this

337
00:18:40,916 --> 00:18:44,916
and if I zoom in all the way here we can
see there's this nice little button

338
00:18:44,916 --> 00:18:45,852
called "Run."

339
00:18:45,852 --> 00:18:49,937
And if I were to actually just run - press
"Run" right there

340
00:18:49,937 --> 00:18:53,436
we get this little window and look! 
Here it is!

341
00:18:53,436 --> 00:18:56,488
Our very first computer program we've
ever written!

342
00:18:56,488 --> 00:19:01,102
There it is running. It opened this window, and
look at the code! It's amazing! It's like

343
00:19:01,180 --> 00:19:03,570
"The Emperor's New Code" or whatever. 
There's nothing there.

344
00:19:03,570 --> 00:19:09,161
Obviously the next steps were gonna get
to in the future videos - we're

345
00:19:09,161 --> 00:19:12,288
still in this sort of introductory place - but
you can just skip right ahead -

346
00:19:12,288 --> 00:19:16,681
is, "What do we write there?
What do we write there, and what is it that

347
00:19:16,681 --> 00:19:17,213
happens?"

348
00:19:17,213 --> 00:19:18,309
and - but - um -

349
00:19:18,309 --> 00:19:23,650
but I'll just write one line
of code just to

350
00:19:23,650 --> 00:19:27,149
demonstrate this - and this is what -

351
00:19:27,149 --> 00:19:31,304
one of the nice things about using Processing
is we were able to just

352
00:19:31,304 --> 00:19:36,626
write our code really simply in this
interface, run it, and we get our window

353
00:19:36,626 --> 00:19:40,707
and everything just kinda a works really
we can kind of get up and running with

354
00:19:40,707 --> 00:19:42,053
that really quickly.

355
00:19:42,053 --> 00:19:47,604
Okay so there's so much more to say
about Processing and why we're using it

356
00:19:47,604 --> 00:19:48,405
I guess um -

357
00:19:51,369 --> 00:19:56,382
but I think this video has gone on
for quite a bit of time. I've kind of rambled through

358
00:19:56,382 --> 00:19:57,686
a lot of things - so we're going to -

359
00:19:57,686 --> 00:20:01,205
We're going to get to a bit more about
Processing, the reference,

360
00:20:01,205 --> 00:20:05,341
how it is that you really learning Java
while you are writing Processing - I think we'll

361
00:20:05,341 --> 00:20:06,302
get to that as we

362
00:20:06,302 --> 00:20:09,371
as we as we start learning in some of
the future videos.

363
00:20:09,371 --> 00:20:13,989
Okay, the next thing I think I'm
actually going to continue this thread

364
00:20:13,989 --> 00:20:17,005
by showing you a kind of range of projects
and things that are made

365
00:20:17,005 --> 00:20:19,538
with Processing and Computational Media

366
00:20:19,538 --> 00:20:23,641
that might help you start to think about
the kinds of projects you might make

367
00:20:23,641 --> 00:20:26,236
a while following along

368
00:20:26,236 --> 00:20:26,733
these videos
