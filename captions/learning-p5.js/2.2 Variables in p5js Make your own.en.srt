1
00:00:02,621 --> 00:00:05,633
Ok, so I am back here an
I'm talking about variables,

2
00:00:05,633 --> 00:00:09,132
I hope ... if I can keep my brain
working and churning

3
00:00:09,132 --> 00:00:12,473
and making sense with the language
and speaking thing, this will work.

4
00:00:12,473 --> 00:00:16,005
So what did we look at in 
the previous video?

5
00:00:16,005 --> 00:00:19,211
We made this kind of big leap
in our programming lives!

6
00:00:19,211 --> 00:00:22,745
Right? We established the fact 
that there is a flow to a program.

7
00:00:22,745 --> 00:00:24,068
What is that flow?

8
00:00:24,068 --> 00:00:30,841
At least in p5js, the environment
that I'm looking at in these videos,

9
00:00:30,841 --> 00:00:35,505
the flow is defined by two functions:
the setup function, which happens once,

10
00:00:35,505 --> 00:00:38,937
and only once, and the draw function,
which loops over and over again.

11
00:00:38,937 --> 00:00:42,426
Typically a thing that you might do
in setup() is to create your canvas.

12
00:00:42,426 --> 00:00:44,973
That happens just once, 
when the program starts.

13
00:00:44,973 --> 00:00:47,733
Typically what you might do in draw(),
which loops over and over again,

14
00:00:47,733 --> 00:00:48,472
is draw stuff.

15
00:00:48,472 --> 00:00:54,296
And we established the fact that if
instead of using a number,

16
00:00:54,296 --> 00:00:55,941
a hardcoded number,

17
00:00:57,081 --> 00:01:01,797
we put in a variable, a word that
stands in for a number,

18
00:01:02,637 --> 00:01:06,393
then each time draw() executes
if that number changes

19
00:01:06,393 --> 00:01:10,652
something different might happen and 
that's how animation happens on the screen.

20
00:01:11,222 --> 00:01:14,359
The ellipse is drawn where the mouse is,
then the mouse moves, and it's drawn

21
00:01:14,359 --> 00:01:16,423
where the mouse is, then the mouse moves etc.

22
00:01:16,423 --> 00:01:19,088
So this was an exciting first step into
the world of variables.

23
00:01:19,088 --> 00:01:20,922
But here's the thing:

24
00:01:22,712 --> 00:01:25,651
there's gonna be a lot more
you wanna do besides just

25
00:01:25,651 --> 00:01:27,108
move things with the mouse.

26
00:01:27,108 --> 00:01:31,253
And even if there are other built-in
variables, like you can know

27
00:01:31,253 --> 00:01:34,140
how many times has draw executed, 
there's a built-in variable called frameCount,

28
00:01:34,140 --> 00:01:39,040
but ultimately what you will need
is your own variables.

29
00:01:39,040 --> 00:01:42,849
Variables that you make up,
that you define, that you bring into this world!

30
00:01:42,849 --> 00:01:46,013
You're going to bring variables
into this world and that's gonna

31
00:01:46,013 --> 00:01:49,172
open up a lot of possibilities
that you didn't have before.

32
00:01:49,172 --> 00:01:50,753
So, for example,

33
00:01:53,703 --> 00:01:56,641
this circle is moving across the screen
according to the mouse,

34
00:01:56,641 --> 00:02:00,033
what if you want that circle, 
I'm not even touching the mouse!,

35
00:02:00,033 --> 00:02:03,920
I just opened my program and
that circle just moves on its own. Magic!

36
00:02:03,920 --> 00:02:06,693
So this is our first step!
That's what we wanna do.

37
00:02:06,693 --> 00:02:11,292
Instead of using a built-in variable
we want to use our own variables.

38
00:02:11,292 --> 00:02:12,984
So how do we do that?

39
00:02:12,984 --> 00:02:15,148
So we need a couple steps:

40
00:02:15,148 --> 00:02:21,388
step 1 is to declare the variable.

41
00:02:21,388 --> 00:02:34,844
[ramble]

42
00:02:34,844 --> 00:02:37,440
number 2 is we need to initialize.

43
00:02:39,660 --> 00:02:43,345
We need to say: aha, in addition to
the fact that I declare this variable

44
00:02:43,345 --> 00:02:45,281
I will give it an initial value

45
00:02:45,281 --> 00:02:50,972
and then the 3rd step is, 
optionally, use the variable.

46
00:02:50,972 --> 00:02:54,377
Although it wouldn't make a lot of sense
to declare and initialize a variable

47
00:02:54,377 --> 00:02:56,105
if you didn't intent to use it.

48
00:02:56,105 --> 00:02:57,732
So how do we do this?

49
00:02:57,732 --> 00:03:01,265
Declare is actually something 
quite simple:

50
00:03:01,265 --> 00:03:07,813
all you have to do is to write
the term 'var', which stands for 'variable'.

51
00:03:07,813 --> 00:03:09,200
This is how you do it in Javascript,

52
00:03:09,200 --> 00:03:10,573
in order languages it's different.

53
00:03:10,573 --> 00:03:16,428
var ... so this means I am now about
to declare a variable!

54
00:03:16,428 --> 00:03:20,561
The next thing I have to do 
is give that variable a name.

55
00:03:20,561 --> 00:03:24,833
And that name can be absolutely 
anything I choose.

56
00:03:24,833 --> 00:03:28,561
'rainbow' is a nice name,
for a variable.

57
00:03:28,561 --> 00:03:33,461
But ultimately what you want to do
is probably name it with

58
00:03:33,461 --> 00:03:38,523
something that is a term that's
associated with what you might

59
00:03:38,523 --> 00:03:39,752
intend the variable to do.

60
00:03:39,752 --> 00:03:42,937
So what I intend to do with this variable
that I am declaring

61
00:03:42,937 --> 00:03:45,468
is use it as the x-position of this circle.

62
00:03:45,468 --> 00:03:51,676
So I might say: 
circleX, is the name of my variable.

63
00:03:51,676 --> 00:03:53,581
I'm just gonna use the word 'circleX'

64
00:03:53,581 --> 00:03:56,804
typically I'm just kind of being 
longwinded but you could

65
00:03:56,804 --> 00:03:57,841
even just name it 'x'.

66
00:03:57,841 --> 00:04:00,081
There's a bunch of rules like
you can't start a variable's name

67
00:04:00,081 --> 00:04:02,860
with a number, you can't use 
strange characters in the variable,

68
00:04:02,860 --> 00:04:05,292
but you'll figure that out 
through trial and error.

69
00:04:05,292 --> 00:04:08,101
Mostly you just wanna use words
and you cannot have any spaces.

70
00:04:08,101 --> 00:04:11,228
So declare and name.

71
00:04:11,228 --> 00:04:13,665
To declare is saying 'var' and the name.

72
00:04:13,665 --> 00:04:21,101
So now I could say:
circleX instead of mouseX

73
00:04:21,101 --> 00:04:24,324
So actually that's 'use',
so I've done step 1 and

74
00:04:24,324 --> 00:04:26,925
I've done step 3, 
use the variable, but if you think about it,

75
00:04:26,925 --> 00:04:29,292
(I need a semicolon here)
if you think about it

76
00:04:29,292 --> 00:04:30,988
there's a huge missing piece here, right?

77
00:04:30,988 --> 00:04:34,664
Because what's the value of circleX?

78
00:04:34,664 --> 00:04:36,425
I mean it could be anything.

79
00:04:36,425 --> 00:04:41,977
Right now it's actually technically, 
in Javascript, the value is undefined.

80
00:04:41,977 --> 00:04:44,781
I think I'm right about that ...
someone will correct me if I'm wrong.

81
00:04:44,781 --> 00:04:47,105
But it's undefined because I never
gave it an initial value.

82
00:04:47,105 --> 00:04:49,413
This is important.
It's not gonna be able to draw at circleX

83
00:04:49,413 --> 00:04:51,381
anywhere unless we give it an 
initial value.

84
00:04:51,381 --> 00:04:53,943
And so I could write here in setup() ...

85
00:04:53,943 --> 00:04:57,300
I could say 'circleX = 50;'

86
00:04:57,300 --> 00:05:01,528
So this is giving it, initializing it ...
and look at this statement:

87
00:05:01,528 --> 00:05:04,529
this is called, this is something
totally new,

88
00:05:04,529 --> 00:05:07,433
the only thing if you've only been
watching these videos and this is

89
00:05:07,433 --> 00:05:10,401
all you know about programming
all we had were function calls,

90
00:05:10,401 --> 00:05:11,705
createCanvas(), background(), ...

91
00:05:11,705 --> 00:05:12,997
now we have something new.

92
00:05:12,997 --> 00:05:17,320
This is what's known as an 
assignment operation.

93
00:05:17,320 --> 00:05:21,693
We are assigning the value 50 
to the variable circleX,

94
00:05:21,693 --> 00:05:24,852
we would not have been able to do this
if we hadn't declared our intention

95
00:05:24,852 --> 00:05:29,256
to use circleX, and notice 
the declaration is at the top of our code,

96
00:05:29,256 --> 00:05:31,465
and our initialization is in setup().

97
00:05:31,465 --> 00:05:33,789
The truth of the matter is
even though I showed you

98
00:05:33,789 --> 00:05:36,061
these as two separate steps,

99
00:05:36,061 --> 00:05:38,593
I'm kind of showing this because
it's kind of interesting like:

100
00:05:38,593 --> 00:05:40,125
look, that's something else that you 
might do in setup()

101
00:05:40,125 --> 00:05:44,401
at the beginning of my program
I want this variable value to equal

102
00:05:44,401 --> 00:05:45,529
to some initial value.

103
00:05:45,529 --> 00:05:48,645
But the truth of the matter is 
most of the time, and in all the examples

104
00:05:48,645 --> 00:05:51,453
that you're gonna see, 
step 1 and 2 will be combined.

105
00:05:51,453 --> 00:05:53,756
And so I'm now gonna rewrite this

106
00:05:53,756 --> 00:05:58,257
[?]

107
00:05:58,257 --> 00:06:02,384
So I can both declare and initialize 
the variable instantly by saying:

108
00:06:02,384 --> 00:06:07,681
var circleX = 50;
ok?

109
00:06:07,681 --> 00:06:12,372
So we've done something ...
we've declared a variable

110
00:06:12,372 --> 00:06:16,144
saying 'var', giving it a name and
an initial value and we're using it

111
00:06:16,144 --> 00:06:19,100
to stand in for something in our code.

112
00:06:19,100 --> 00:06:22,068
Let's go take a look at this 
actually work over here.

113
00:06:22,068 --> 00:06:23,713
Ok, so here's a little program ...

114
00:06:23,713 --> 00:06:27,133
if I run it you can see 
what exactly we have.

115
00:06:27,133 --> 00:06:31,164
We have an ellipse being drawn
only ever at location 50.

116
00:06:31,164 --> 00:06:32,277
So it doesn't move.

117
00:06:32,277 --> 00:06:34,776
So now let's add that stuff to our program.

118
00:06:34,776 --> 00:06:35,904
So at the top

119
00:06:35,904 --> 00:06:39,840
I'm gonna say: var circleX, 
and by the way,

120
00:06:39,840 --> 00:06:43,165
you can declare, we're gonna see 
later that you can declare

121
00:06:43,165 --> 00:06:45,600
variables in other places,
but for right now,

122
00:06:45,600 --> 00:06:51,265
as a constraint, I would like to say:
all the variables get declared at the top.

123
00:06:51,265 --> 00:06:54,232
Let's just use that as 
a constraint right now.

124
00:06:54,232 --> 00:06:57,828
Then I'm gonna give it
an initial value, equal to 50.

125
00:06:57,828 --> 00:07:00,923
And right here, instead of 
saying ellipse(50

126
00:07:00,923 --> 00:07:03,056
I'm gonna say ellipse(circleX

127
00:07:03,056 --> 00:07:04,328
and I'm gonna run it.

128
00:07:04,328 --> 00:07:07,153
Look at that! 
Same exact program,

129
00:07:07,153 --> 00:07:12,393
only instead of hardcoding 50 there,
50 is up here.

130
00:07:12,393 --> 00:07:15,412
Ok, now ...

131
00:07:15,412 --> 00:07:17,043
let's just prove that this is 
actually working

132
00:07:17,043 --> 00:07:20,206
I'm gonna say '150'
and stop and start it.

133
00:07:20,206 --> 00:07:22,107
Look! That circle is a little 
bit further.

134
00:07:22,107 --> 00:07:23,981
Now I'm gonna say '250'

135
00:07:23,981 --> 00:07:27,347
and look, the circle is even 
a little bit further over.

136
00:07:27,347 --> 00:07:32,608
So whatever the value of circleX is
that's where that ellipse will be drawn.

137
00:07:32,608 --> 00:07:39,334
Ok, at the beginning of this video,
in my mind was: I would like

138
00:07:39,334 --> 00:07:42,609
to make that circle move
by itself across the screen.

139
00:07:42,609 --> 00:07:45,933
You're watching all these videos
and all you get is a little circle

140
00:07:45,933 --> 00:07:47,804
that moves across the screen
but it'll lead, hopefully,

141
00:07:47,804 --> 00:07:49,431
to bigger and better things!

142
00:07:50,321 --> 00:07:51,337
How are we gonna do that?

143
00:07:52,007 --> 00:07:53,724
So let's come back over here for a second.

144
00:08:00,634 --> 00:08:01,971
What I want to do ...

145
00:08:04,441 --> 00:08:05,680
is the following:

146
00:08:08,630 --> 00:08:10,441
I want the circle

147
00:08:12,081 --> 00:08:15,474
first to be drawn at
circleX =50

148
00:08:16,484 --> 00:08:19,845
So, remember:
draw(), which is this function,

149
00:08:19,845 --> 00:08:22,376
is looping over and over again,

150
00:08:22,376 --> 00:08:24,233
it's over and over again,

151
00:08:24,233 --> 00:08:26,605
it happens once, it happens another time,
another time,

152
00:08:26,605 --> 00:08:28,637
so first I want to draw it at 50

153
00:08:28,637 --> 00:08:30,865
then maybe I want it to draw at 51

154
00:08:31,635 --> 00:08:33,429
the next time maybe I want
to draw it at 52,

155
00:08:33,429 --> 00:08:36,333
the next time maybe 53, right?

156
00:08:36,333 --> 00:08:41,492
Each time draw() loops, executes again,
I want the circle to be drawn

157
00:08:41,492 --> 00:08:43,524
one pixel over from the previous time.

158
00:08:43,524 --> 00:08:47,561
So if you had to write an instruction
to do that, each time to draw,

159
00:08:47,561 --> 00:08:48,599
what would you say?

160
00:08:48,599 --> 00:08:51,833
You might say 'increment circleX
by 1', you know?

161
00:08:51,833 --> 00:08:55,397
Take 1, add 1 to circleX

162
00:08:55,397 --> 00:08:58,252
You might say 'add 5 to circleX',
and it'll move from 0 to 5,

163
00:08:58,252 --> 00:08:59,862
to 10, to 15, to 20, ... right?

164
00:08:59,862 --> 00:09:01,771
So how do we write that with code?

165
00:09:01,771 --> 00:09:05,272
Here is a way ... remember we had 
an assignment operation

166
00:09:05,272 --> 00:09:07,385
circleX = 50

167
00:09:07,385 --> 00:09:10,033
there's something weird you can do ...

168
00:09:10,033 --> 00:09:14,209
it's a common thing in programming
but at first it might seem a little weird.

169
00:09:14,209 --> 00:09:21,081
circleX = circleX + 1;

170
00:09:21,081 --> 00:09:22,773
Now look at that statement.

171
00:09:22,773 --> 00:09:25,241
For a moment you might look
at that and think:

172
00:09:25,241 --> 00:09:29,564
that's like a paradox ... 
that's impossible ...

173
00:09:29,564 --> 00:09:32,113
a number cannot equal itself plus 1!

174
00:09:32,113 --> 00:09:33,405
5 does not equal to 6,

175
00:09:33,405 --> 00:09:34,841
7 does not equal to 8,

176
00:09:34,841 --> 00:09:36,272
20 does not equal to 21 ...

177
00:09:36,272 --> 00:09:38,197
but this is not what we're doing.

178
00:09:38,197 --> 00:09:41,291
I am not testing for equality here.

179
00:09:41,291 --> 00:09:43,228
This is an assignment operation!

180
00:09:43,228 --> 00:09:45,000
What I am saying is:

181
00:09:45,000 --> 00:09:49,165
take circleX and set it equal to 
the value of itself plus 1.

182
00:09:49,165 --> 00:09:53,601
So if circleX is equal to 50,
50 + 1 = 51,

183
00:09:53,601 --> 00:09:55,758
and now assign that value to circleX.

184
00:09:55,758 --> 00:09:57,489
circleX is now 51.

185
00:09:57,489 --> 00:10:01,360
Now run through draw() again,
take the value of circleX, 51,

186
00:10:01,360 --> 00:10:05,665
add 1 to it, 52, 
assign that value back to circleX.

187
00:10:05,665 --> 00:10:09,760
So in an assignment operation
the right-hand side of the equation

188
00:10:09,760 --> 00:10:13,750
is always evaluated and then
assigned to the left-hand side.

189
00:10:13,750 --> 00:10:16,892
This is an incrementation operation.

190
00:10:16,892 --> 00:10:21,021
We're just taking a variable
and adding 1 to it, over and over again

191
00:10:21,021 --> 00:10:22,153
because draw() loops.

192
00:10:22,153 --> 00:10:25,104
So let's go over here and see ...

193
00:10:25,104 --> 00:10:27,400
First, let's start circleX at 0.

194
00:10:27,400 --> 00:10:29,602
So I just change circleX to starting at 0.

195
00:10:30,452 --> 00:10:32,401
And you can see there it is at 0

196
00:10:32,401 --> 00:10:34,529
and now I'm going to add
that line of code:

197
00:10:34,529 --> 00:10:38,756
circleX = circleX +1;

198
00:10:39,826 --> 00:10:45,528
Every time through draw() 
circleX will go up by 1.

199
00:10:46,688 --> 00:10:51,438
Yay! It's moving! Tadaaa!

200
00:10:51,438 --> 00:10:53,288
Ok, so that really worked.

201
00:10:53,288 --> 00:10:57,017
So I know this is like incredible
simplistic and basic in terms of the result

202
00:10:57,017 --> 00:11:00,353
but this is the foundation
upon which you can build

203
00:11:00,353 --> 00:11:01,661
a lot of interesting things.

204
00:11:01,661 --> 00:11:05,581
Because there is a lot more math,
there's a lot more ways

205
00:11:05,581 --> 00:11:08,904
you can change a variable, 
besides just adding 1 to it.

206
00:11:08,904 --> 00:11:11,181
There's a lot more places
you could put variables

207
00:11:11,181 --> 00:11:13,404
besides just in the x-spot.

208
00:11:13,404 --> 00:11:17,145
So what I would say to you
right now is:

209
00:11:17,145 --> 00:11:21,145
why don't you try to make 
a variable for the y-position?

210
00:11:21,145 --> 00:11:23,953
Why don't you try to make a variable
for the size of the circle?

211
00:11:23,953 --> 00:11:26,921
Can you make the circle grow?
Can you make it shrink?

212
00:11:26,921 --> 00:11:28,517
Can you make a color change?

213
00:11:28,517 --> 00:11:32,145
See if you can make up more
variables, declare more variables

214
00:11:32,145 --> 00:11:34,016
at the top, and put them
in different places

215
00:11:34,016 --> 00:11:35,277
and try to do stuff to them.

216
00:11:35,277 --> 00:11:37,309
The truth of the matter is 
in order to get

217
00:11:37,309 --> 00:11:40,681
more interesting results
you're going to need something

218
00:11:40,681 --> 00:11:41,973
that I'm going to talk about

219
00:11:41,973 --> 00:11:43,277
in a future video:
conditional logic,

220
00:11:43,277 --> 00:11:46,473
because, you know, here's
the next logical thing:

221
00:11:46,473 --> 00:11:51,004
first, let's make it go 
a little bit faster,

222
00:11:51,004 --> 00:11:52,372
like circleX = circleX + 10;

223
00:11:52,372 --> 00:11:54,681
Like, oh, that circle, no, no, 
don't go away!

224
00:11:54,681 --> 00:11:56,036
Come back! Come back!

225
00:11:56,036 --> 00:11:57,536
It's never gonna come back!

226
00:11:57,536 --> 00:12:01,037
But if I made some conditional logic
like: if it gets to the end

227
00:12:01,037 --> 00:12:02,371
then turn around and come back,

228
00:12:02,371 --> 00:12:04,537
you know, that's something
I'm gonna do in a future video

229
00:12:04,537 --> 00:12:06,973
but for now, just try to 
add a bunch of variables

230
00:12:06,973 --> 00:12:07,973
and see what you can get.

231
00:12:07,973 --> 00:12:10,424
Ok, that's good.

232
00:12:10,424 --> 00:12:14,297
There's gonna be another video
in a moment where I am

233
00:12:14,297 --> 00:12:16,121
going to show you a different
way of organizing your variables.

234
00:12:16,121 --> 00:12:19,201
I'm a little skeptical about 
whether that's a good idea or not

235
00:12:19,201 --> 00:12:20,231
but I'm gonna do it!
