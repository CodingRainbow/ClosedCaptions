1
00:00:01,999 --> 00:00:08,516
So, hopefully by now you've
played a little bit with variables in p5.

2
00:00:08,516 --> 00:00:10,211
Maybe you used mouseX, mouseY,

3
00:00:10,211 --> 00:00:11,807
you made up some of your own variables.

4
00:00:11,807 --> 00:00:14,232
And I want to look actually
at an example,

5
00:00:14,232 --> 00:00:15,701
it doesn't really have
a lot more to it,

6
00:00:15,701 --> 00:00:18,859
this example is just like the one
I made previously,

7
00:00:18,859 --> 00:00:21,827
where I have a circle that's just 
moving across the screen.

8
00:00:21,827 --> 00:00:24,700
And you can see here:
how did I do that?

9
00:00:24,700 --> 00:00:27,555
There's an incrementation
operation right down here:

10
00:00:27,555 --> 00:00:30,619
that every time through draw()
x goes up by 1.

11
00:00:30,619 --> 00:00:33,150
So first the circle's here,
then it goes up by one,

12
00:00:33,150 --> 00:00:34,879
then it's here, then it's here,
etc

13
00:00:34,879 --> 00:00:37,720
So that how you move something
on the screen.

14
00:00:37,720 --> 00:00:40,118
Now one thing I did here 
is I added a whole lot

15
00:00:40,118 --> 00:00:41,492
of other variables.

16
00:00:41,492 --> 00:00:44,650
Let's have a 'y' and a 'diameter'
for the size of that circle.

17
00:00:44,650 --> 00:00:47,619
And R, G, B variables for the background.

18
00:00:47,619 --> 00:00:49,764
So maybe I could do some
things like increment

19
00:00:49,764 --> 00:00:53,656
the red amount, decrement
the green amount.

20
00:00:53,656 --> 00:00:57,153
And hopefully these are the kinds
of things that you've been playing with.

21
00:00:57,783 --> 00:00:59,943
And what I wanna do
in this video

22
00:00:59,943 --> 00:01:03,651
is show you a way 
to organize your variables.

23
00:01:03,651 --> 00:01:07,442
And while it seems a little bit
silly and premature perhaps,

24
00:01:07,442 --> 00:01:10,988
this is fine!, I'm not actually 
gonna change anything

25
00:01:10,988 --> 00:01:14,315
about this program, 
but I'm just going to change

26
00:01:14,315 --> 00:01:15,815
the way it's organized.

27
00:01:15,815 --> 00:01:19,075
And this is going to set
a foundation for later,

28
00:01:19,075 --> 00:01:25,878
as well as help you to just
keep your code in a neat and tidy way,

29
00:01:25,878 --> 00:01:28,702
which is something that I'm
a little too obsessed about

30
00:01:28,702 --> 00:01:32,109
and I'm really working on it, 
I really am, I swear.

31
00:01:32,109 --> 00:01:35,284
Ok, so let's think about how
that could work.

32
00:01:36,604 --> 00:01:41,671
So let's just say for the moment
that I have a variable x,

33
00:01:41,671 --> 00:01:44,771
and it has an initial value of 0.

34
00:01:44,771 --> 00:01:49,544
And I have a variable y and
it has an initial value of 100.

35
00:01:49,544 --> 00:01:56,480
And I have a variable diameter 
which has an initial value of 50.

36
00:01:57,260 --> 00:02:01,075
So these three variables they go together, right?

37
00:02:01,075 --> 00:02:03,608
I'm using them for that circle:

38
00:02:03,608 --> 00:02:06,171
x for the x-position of that circle
on the screen,

39
00:02:06,171 --> 00:02:09,272
y for the y-position of that circle 
on the screen,

40
00:02:09,272 --> 00:02:11,304
and the diameter for that circle 
on the screen.

41
00:02:11,304 --> 00:02:13,933
And while this relationship
of these variables is only

42
00:02:13,933 --> 00:02:16,170
something in my mind, 
Javascript doesn't care!

43
00:02:16,170 --> 00:02:18,887
The computer doesn't care. You can 
use these variables for anything.

44
00:02:18,887 --> 00:02:21,127
I could plug that x value into 
the color for something,

45
00:02:21,127 --> 00:02:21,919
and it would work.

46
00:02:22,389 --> 00:02:26,823
It might be helpful if I could
put all of these together.

47
00:02:26,823 --> 00:02:28,982
And there is a way I could do that.

48
00:02:29,512 --> 00:02:32,792
I can say: 'var' and I can say 'circle'

49
00:02:32,792 --> 00:02:36,920
So I have the circle on the screen
and I'm gonna call it a 'circle'.

50
00:02:37,490 --> 00:02:41,647
And then what I am going to do is:
equals, and I'm going to have

51
00:02:41,647 --> 00:02:45,679
an open curly bracket
and a close curly bracket.

52
00:02:46,419 --> 00:02:49,324
So circle is now, 
what is happening is,

53
00:02:49,324 --> 00:02:51,387
you could think of 'circle' as
a container.

54
00:02:51,387 --> 00:02:54,551
What I would like to do is 
instead of having 3 variables

55
00:02:54,551 --> 00:02:57,760
floating on their own,
I would like to not have

56
00:02:57,760 --> 00:02:59,793
these 3 variables floating on their own,

57
00:02:59,793 --> 00:03:04,356
but I would like to put those 3 variables 
inside of this variable called 'circle'.

58
00:03:05,166 --> 00:03:10,531
In order to do that I'm gonna say:
x: 0,

59
00:03:10,531 --> 00:03:13,344
(boy, I really hope I'm getting 
the syntax of this right, cause

60
00:03:13,344 --> 00:03:14,812
this is new for me!)

61
00:03:15,532 --> 00:03:19,115
And if I get it wrong, I could always 
make it again. I'm sure somebody

62
00:03:19,115 --> 00:03:22,551
on the Internet will tell me, 
if anybody actually watches this.

63
00:03:22,551 --> 00:03:32,003
y: 100, diameter: 50

64
00:03:32,003 --> 00:03:35,730
Now where the line breaks are 
doesn't actually matter.

65
00:03:35,730 --> 00:03:39,541
The curly brackets matter.
The colons matter, the commas matter.

66
00:03:39,541 --> 00:03:44,540
So you can see that, just like setup(),
function setup() was a block of code,

67
00:03:44,540 --> 00:03:47,344
with a beginning and an end,
function draw() is

68
00:03:47,344 --> 00:03:48,812
a block of code with
a beginning and an end,

69
00:03:48,812 --> 00:03:52,844
this variable 'circle' now has a block 
of code with a beginning and an end,

70
00:03:52,844 --> 00:03:56,700
and 'circle' is a container for 
these three variables.

71
00:03:59,720 --> 00:04:03,523
Now container is actually not
the technical term for this,

72
00:04:03,523 --> 00:04:06,604
and what is interesting about 
what you have just seen here,

73
00:04:06,604 --> 00:04:09,656
you have now learned about
Javascript objects.

74
00:04:10,286 --> 00:04:12,218
Javascript objects.

75
00:04:12,218 --> 00:04:17,332
The syntax for this is 
Javascript object notation.

76
00:04:17,332 --> 00:04:21,282
The way that you create an object,
this 'circle' is an object,

77
00:04:21,282 --> 00:04:24,783
and that object has data inside of it:

78
00:04:24,783 --> 00:04:26,978
it has an x, a y and a diameter.

79
00:04:26,978 --> 00:04:29,592
And boy, are we gonna someday
get to some really exciting stuff

80
00:04:29,592 --> 00:04:32,187
where we see that an object
can also have behaviors

81
00:04:32,187 --> 00:04:33,820
and so much more to it.

82
00:04:33,820 --> 00:04:36,719
But right now, you can think 
of 'there is my circle object

83
00:04:36,719 --> 00:04:39,321
and I'm visualising my circle object
on the screen,

84
00:04:39,321 --> 00:04:40,623
I'm visualising its data.

85
00:04:40,623 --> 00:04:43,751
Its x is 0, its y is 100
and its diameter is 50.

86
00:04:43,751 --> 00:04:46,592
By the way, I'm using these terms
by accident, what is super exciting

87
00:04:46,592 --> 00:04:49,720
about this is, look at this, 
we're not gonna get to this

88
00:04:49,720 --> 00:04:52,383
for many, many videos,
this is exactly how you get data

89
00:04:52,383 --> 00:04:53,383
from lots of things.

90
00:04:53,383 --> 00:04:57,687
So if you wanna get today's weather
in to your p5js sketch

91
00:04:57,687 --> 00:05:00,883
you might connect to some
weather service that's gonna

92
00:05:00,883 --> 00:05:01,852
send you data.

93
00:05:01,852 --> 00:05:03,560
It's gonna send you data 
exactly like this.

94
00:05:03,560 --> 00:05:09,890
weather = {
temperature: , high temperature:

95
00:05:09,890 --> 00:05:13,979
so learning this syntax is going
to lay the foundation

96
00:05:13,979 --> 00:05:16,321
for just about everything 
you do in Javascript.

97
00:05:16,321 --> 00:05:18,904
Here is a Javascript object.

98
00:05:18,904 --> 00:05:22,436
So let's now look at how 
we implement this in the code.

99
00:05:23,016 --> 00:05:24,841
So I'm coming back over here,

100
00:05:24,841 --> 00:05:29,563
and instead of these 3 variables,
and we're gonna find out

101
00:05:29,563 --> 00:05:32,403
if I did this correctly syntax-wise

102
00:05:32,403 --> 00:05:39,631
x:0, y:200,

103
00:05:39,631 --> 00:05:40,435
oops, I put a semicolon there,
a comma is actually correct,

104
00:05:40,435 --> 00:05:42,290
and then diameter:50

105
00:05:42,290 --> 00:05:44,321
and I can put a semicolon there.

106
00:05:44,321 --> 00:05:46,290
So this is really one line of code.

107
00:05:46,290 --> 00:05:49,840
It ends with a semicolon,
but I'm breaking it into separate lines,

108
00:05:49,840 --> 00:05:52,530
and I may use p5editor's 
auto-format,

109
00:05:52,530 --> 00:05:53,467
whoops,

110
00:05:53,467 --> 00:05:56,340
which you can see, sort of
auto-formatted it for me

111
00:05:56,340 --> 00:05:58,531
and this is sort of a 
standard way of doing it.

112
00:05:58,531 --> 00:06:00,392
So, that was a bit of a digression.

113
00:06:01,632 --> 00:06:04,132
But I just noticed a little bug
in the editor which I'm gonna file.

114
00:06:05,452 --> 00:06:08,392
So x is 0, y is 200 and diameter is 50.

115
00:06:08,392 --> 00:06:12,216
So I can remove these variables
from the top

116
00:06:12,216 --> 00:06:13,456
and I'm gonna hit 'save'

117
00:06:13,456 --> 00:06:14,923
and now I'm gonna run this.

118
00:06:14,923 --> 00:06:17,893
Aha! Now look at this.

119
00:06:17,893 --> 00:06:20,779
This is also a key moment
because, boy, are you gonna

120
00:06:20,779 --> 00:06:23,551
have a lot of errors happening 
when you run your code.

121
00:06:23,551 --> 00:06:26,312
So I'm gonna zoom in
to the bottom here,

122
00:06:26,312 --> 00:06:28,051
and we can see: what is this error?

123
00:06:28,051 --> 00:06:32,120
'Uncaught ReferenceError: x is not defined'
on line 20.

124
00:06:32,550 --> 00:06:35,084
So I'm gonna zoom back out
and go down to line 20,

125
00:06:35,084 --> 00:06:38,519
ah, x is not defined.
well, x is no longer defined,

126
00:06:38,519 --> 00:06:40,892
I didn't declare a variable named 'x'.

127
00:06:40,892 --> 00:06:45,583
What I did is I declared a variable
named 'circle', which is an object,

128
00:06:45,583 --> 00:06:49,019
and one of the fields,
the pieces of data of that object is 'x'.

129
00:06:49,019 --> 00:06:53,183
So how do I get then that x
which is inside of the circle?

130
00:06:54,123 --> 00:06:57,424
And the way that you do that
is with something known as

131
00:06:57,424 --> 00:07:02,120
'dot syntax', right?

132
00:07:02,120 --> 00:07:06,247
When I just had this variable,
variable x, I just said:

133
00:07:06,247 --> 00:07:09,880
ellipse(x,

134
00:07:09,880 --> 00:07:11,810
So now what do I want to do?

135
00:07:11,810 --> 00:07:14,975
I wanna draw the ellipse at what?

136
00:07:14,975 --> 00:07:18,863
I wanna draw the ellipse at
the circle's x, right?

137
00:07:18,863 --> 00:07:21,204
The x inside circle.
And the way that I get there

138
00:07:21,204 --> 00:07:25,039
is I refer to the variable name
'circle' and I get to that

139
00:07:25,039 --> 00:07:27,330
x value inside with a dot.

140
00:07:27,330 --> 00:07:29,235
dot x.

141
00:07:29,235 --> 00:07:31,831
circle.x

142
00:07:31,831 --> 00:07:35,641
Okay, let's go back now, over here.

143
00:07:35,641 --> 00:07:37,944
And come down to here,
and I'm gonna say:

144
00:07:37,944 --> 00:07:47,039
circle.x, circle.y, 
circle.diameter, circle.diameter

145
00:07:47,039 --> 00:07:50,299
Ok, oh, look at this!
I already forgot, I was like

146
00:07:50,299 --> 00:07:51,331
Oh, let's run this again!

147
00:07:51,331 --> 00:07:55,267
and it says 'uncaught error' on line 22,
that x is not defined

148
00:07:55,267 --> 00:08:02,464
because I need to change this to:
circle.x and circle.x

149
00:08:02,464 --> 00:08:05,864
So I run this and we've got
the same exact program now.

150
00:08:05,864 --> 00:08:09,463
Again, nothing new is happening here.

151
00:08:09,463 --> 00:08:13,401
The same exact program as before
but I did do something interesting

152
00:08:13,401 --> 00:08:17,091
which is I organised a bunch 
of variables into something.

153
00:08:17,091 --> 00:08:20,559
Which leads me to a point where 
I'm like: maybe this might be

154
00:08:20,559 --> 00:08:24,558
useful if I were to make two of them, right?

155
00:08:24,558 --> 00:08:26,692
circle1 and circle2

156
00:08:26,692 --> 00:08:31,351
This way I don't have all these 
x1, x2, y1, y2 ...

157
00:08:31,351 --> 00:08:32,691
everything floating around.

158
00:08:32,691 --> 00:08:35,527
So this way of organising your
collections of variables

159
00:08:35,527 --> 00:08:38,483
that are being used together
conceptually into an object

160
00:08:38,483 --> 00:08:41,352
can really help you organize 
and keep track of things

161
00:08:41,352 --> 00:08:43,485
and lays a good foundations 
for a lot of things.

162
00:08:43,485 --> 00:08:46,484
There's a lot more we're gonna do with
object oriented programming later

163
00:08:46,484 --> 00:08:48,984
and it also sets a foundation for 
working with data

164
00:08:48,984 --> 00:08:51,453
that comes from other sources
because it will have exactly

165
00:08:51,453 --> 00:08:52,579
the same syntax.

166
00:08:52,579 --> 00:08:55,611
So as an exercise that you might
try for yourself is:

167
00:08:55,611 --> 00:08:58,787
see if you can take something 
you're working on,

168
00:08:58,787 --> 00:09:01,370
reorganize your variables into these objects,

169
00:09:01,370 --> 00:09:04,985
and if you're looking at this one,
try to make two objects,

170
00:09:04,985 --> 00:09:09,110
try to maybe make your own 
color object that has

171
00:09:09,110 --> 00:09:11,401
an R, G, B and an alpha perhaps in it,

172
00:09:11,401 --> 00:09:13,712
those are things that you can try to do!

173
00:09:13,712 --> 00:09:16,904
And hopefully this video
was useful and interesting to you!

174
00:09:16,904 --> 00:09:19,971
And I finished recording it.
Excellent, good bye!
